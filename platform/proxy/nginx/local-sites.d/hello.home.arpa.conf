# Default server block for HTTP - redirect to HTTPS
server {
    listen 80;
    server_name hello.home.arpa;
    return 301 https://$host$request_uri;
}

upstream hello_authenticated {
    server 127.0.0.1:8443;
}

server {
    listen 8443 ssl;
    server_name hello.home.arpa;

    ssl_certificate /etc/nginx/certs/home.arpa.crt;
    ssl_certificate_key /etc/nginx/certs/home.arpa.key;

    # Handle errors
    error_page 403 = @forbidden;
    location @forbidden { return 403 'Forbidden'; }


    location /admin {
        include /etc/nginx/import.d/set-headers.conf;

        # Check if user is in administrators group
        if ($http_x_groups !~ "/administrators") {
            add_header Content-Type text/html;
            return 403 '<!DOCTYPE html><html><body><h1>Forbidden</h1></body></html>';
        }

        proxy_pass http://api:3000;
    }

    location /authorized {
        include /etc/nginx/import.d/set-headers.conf;

        proxy_pass http://api:3000;
    }

    location / {
        include /etc/nginx/import.d/set-headers.conf;

        proxy_pass http://api:3000;
    }
}

# Server block for authenticated requests
server {
    listen 443 ssl;
    server_name hello.home.arpa;

    # SSL certificate files
    ssl_certificate /etc/nginx/certs/home.arpa.crt;
    ssl_certificate_key /etc/nginx/certs/home.arpa.key;

    # Increase buffer sizes
    proxy_buffers 16 16k;
    proxy_buffer_size 32k;

    # Include a shared location for OAuth2 authentication
    location /oauth2/ {
        proxy_pass http://middleware_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
    }

    # Handle errors
    # error_page 202 = @forbidden;
    # location @forbidden {
    #     add_header Content-Type text/plain;
    #     return 202 'Forbidden';
    # }

    # Same logic applies for all authenticated routes
    error_page 418 = @hello_authenticated;
    location /admin/ { return 418; }
    location /authorized { return 418; }

    # Same logic applies for all authenticated routes
    location @hello_authenticated {
        # Enforce authentication by validating user session
        auth_request /oauth2/auth;
        include /etc/nginx/import.d/set-headers.conf;

        # Ignore SSL verification errors when proxying to upstream
        proxy_ssl_verify off;

        # Forward valid admin requests to the backend and include error messages
        proxy_intercept_errors off;
        proxy_pass https://hello_authenticated;
    }

    # Default location for non-authenticated routes
    location / {
        add_header Content-Type text/plain;
        return 200 'any user should be able to access this page\n';
    }

}

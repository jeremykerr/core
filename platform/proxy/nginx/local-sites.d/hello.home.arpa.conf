# Default server block for HTTP - redirect to HTTPS
server {
    listen 80;
    server_name hello.home.arpa;
    return 301 https://$host$request_uri;
}

map $groups $admin_upstream {
    default @unauthorized;  # Could point to an error page or service
    "~/administrators\s" @admin_proxy;
}

# Server block for authenticated requests
server {
    listen 443 ssl;
    server_name hello.home.arpa;

    # SSL certificate files
    ssl_certificate /etc/nginx/certs/home.arpa.crt;
    ssl_certificate_key /etc/nginx/certs/home.arpa.key;

    # Error pages
    location @unauthorized {
        add_header Content-Type text/plain;
        return 401 'Unauthorized';
    }

    # Include a shared location for OAuth2 authentication
    location /oauth2/ {
        proxy_pass http://middleware_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
    }

    # Protect a specific route (e.g., /admin/)
    location @admin_proxy {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://api:3000;
    }

    location /admin/ {
        # Enforce authentication by validating user session
        auth_request /oauth2/auth;

        # Pass headers from OAuth2-Proxy to downstream services
        auth_request_set $user $upstream_http_x_auth_request_user;
        auth_request_set $email $upstream_http_x_auth_request_email;
        auth_request_set $groups $upstream_http_x_auth_request_groups;
        auth_request_set $roles $upstream_http_x_auth_request_roles;
        auth_request_set $token $upstream_http_x_auth_request_access_token;
        auth_request_set $auth_cookie $upstream_http_cookie;

        # Error handling for failed authentication
        # error_page 401 = @unauthorized;

        # Network headers
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;

        # User headers
        proxy_set_header X-User $user;
        proxy_set_header X-Email $email;
        proxy_set_header X-Groups $groups;
        proxy_set_header X-Roles $roles;
        proxy_set_header X-Auth-Token $token;
        proxy_set_header Authorization "Bearer $token";

        # Use the mapped location
        try_files $admin_upstream =401;
    }

    # Protect a specific route (e.g., /authorized/)
    location /authorized/ {
        # Enforce authentication by validating user session
        auth_request /oauth2/auth;

        # Pass headers from OAuth2-Proxy to downstream services
        auth_request_set $user $upstream_http_x_auth_request_user;
        auth_request_set $email $upstream_http_x_auth_request_email;
        auth_request_set $groups $upstream_http_x_auth_request_groups;
        auth_request_set $roles $upstream_http_x_auth_request_roles;
        auth_request_set $token $upstream_http_x_auth_request_access_token;
        auth_request_set $auth_cookie $upstream_http_cookie;

        # Network headers
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;

        # User headers
        proxy_set_header X-User $user;
        proxy_set_header X-Email $email;
        proxy_set_header X-Groups $groups;
        proxy_set_header X-Roles $roles;
        proxy_set_header X-Auth-Token $token;
        proxy_set_header Authorization "Bearer $token";

        proxy_pass http://api:3000;
    }

    # Default location for other routes
    location / {
        add_header Content-Type text/plain;
        return 200 'any user should be able to access this page\n';
    }

}
